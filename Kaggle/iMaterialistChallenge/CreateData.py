from random import shuffle
from tqdm import tqdm
import cv2
import os
import numpy as np
import json


def create_multitask_train_data():
    with open(anno_dir + 'train.json') as json_data: anno_train = json.load(json_data)
    training_data = []
    counter, counterbreak = 0, 900000
    for filename in tqdm(anno_train['annotations']):
        d = {1:[1,0],2:[1,0],3:[1,0],4:[1,0],5:[1,0],6:[1,0],7:[1,0],8:[1,0],9:[1,0],10:[1,0],
                11:[1,0],12:[1,0],13:[1,0],14:[1,0],15:[1,0],16:[1,0],17:[1,0],18:[1,0],19:[1,0],20:[1,0],
                21:[1,0],22:[1,0],23:[1,0],24:[1,0],25:[1,0],26:[1,0],27:[1,0],28:[1,0],29:[1,0],30:[1,0],
                31:[1,0],32:[1,0],33:[1,0],34:[1,0],35:[1,0],36:[1,0],37:[1,0],38:[1,0],39:[1,0],40:[1,0],
                41:[1,0],42:[1,0],43:[1,0],44:[1,0],45:[1,0],46:[1,0],47:[1,0],48:[1,0],49:[1,0],50:[1,0],
                51:[1,0],52:[1,0],53:[1,0],54:[1,0],55:[1,0],56:[1,0],57:[1,0],58:[1,0],59:[1,0],60:[1,0],
                61:[1,0],62:[1,0],63:[1,0],64:[1,0],65:[1,0],66:[1,0],67:[1,0],68:[1,0],69:[1,0],70:[1,0],
                71:[1,0],72:[1,0],73:[1,0],74:[1,0],75:[1,0],76:[1,0],77:[1,0],78:[1,0],79:[1,0],80:[1,0],
                81:[1,0],82:[1,0],83:[1,0],84:[1,0],85:[1,0],86:[1,0],87:[1,0],88:[1,0],89:[1,0],90:[1,0],
                91:[1,0],92:[1,0],93:[1,0],94:[1,0],95:[1,0],96:[1,0],97:[1,0],98:[1,0],99:[1,0],100:[1,0],
                101:[1,0],102:[1,0],103:[1,0],104:[1,0],105:[1,0],106:[1,0],107:[1,0],108:[1,0],109:[1,0],110:[1,0],
                111:[1,0],112:[1,0],113:[1,0],114:[1,0],115:[1,0],116:[1,0],117:[1,0],118:[1,0],119:[1,0],120:[1,0],
                121:[1,0],122:[1,0],123:[1,0],124:[1,0],125:[1,0],126:[1,0],127:[1,0],128:[1,0],129:[1,0],130:[1,0],
                131:[1,0],132:[1,0],133:[1,0],134:[1,0],135:[1,0],136:[1,0],137:[1,0],138:[1,0],139:[1,0],140:[1,0],
                141:[1,0],142:[1,0],143:[1,0],144:[1,0],145:[1,0],146:[1,0],147:[1,0],148:[1,0],149:[1,0],150:[1,0],
                151:[1,0],152:[1,0],153:[1,0],154:[1,0],155:[1,0],156:[1,0],157:[1,0],158:[1,0],159:[1,0],160:[1,0],
                161:[1,0],162:[1,0],163:[1,0],164:[1,0],165:[1,0],166:[1,0],167:[1,0],168:[1,0],169:[1,0],170:[1,0],
                171:[1,0],172:[1,0],173:[1,0],174:[1,0],175:[1,0],176:[1,0],177:[1,0],178:[1,0],179:[1,0],180:[1,0],
                181:[1,0],182:[1,0],183:[1,0],184:[1,0],185:[1,0],186:[1,0],187:[1,0],188:[1,0],189:[1,0],190:[1,0],
                191:[1,0],192:[1,0],193:[1,0],194:[1,0],195:[1,0],196:[1,0],197:[1,0],198:[1,0],199:[1,0],200:[1,0],
                201:[1,0],202:[1,0],203:[1,0],204:[1,0],205:[1,0],206:[1,0],207:[1,0],208:[1,0],209:[1,0],210:[1,0],
                211:[1,0],212:[1,0],213:[1,0],214:[1,0],215:[1,0],216:[1,0],217:[1,0],218:[1,0],219:[1,0],220:[1,0],
                221:[1,0],222:[1,0],223:[1,0],224:[1,0],225:[1,0],226:[1,0],227:[1,0],228:[1,0]}

        for i in range(len(filename['labelId'])): d[int(filename['labelId'][i])] = [0, 1]

        path = os.path.join(TRAIN_DIR, filename['imageId'] + '.jpg')
        try:
            img = cv2.resize(cv2.imread(path, cv2.IMREAD_GRAYSCALE), (IMG_SIZE, IMG_SIZE))
            training_data.append([np.array(img), d[1], d[2], d[3], d[4], d[5], d[6], d[7], d[8], d[9], d[10],
                                    d[11], d[12], d[13], d[14], d[15], d[16], d[17], d[18], d[19], d[20],
                                    d[21], d[22], d[23], d[24], d[25], d[26], d[27], d[28], d[29], d[30],
                                    d[31], d[32], d[33], d[34], d[35], d[36], d[37], d[38], d[39], d[40],
                                    d[41], d[42], d[43], d[44], d[45], d[46], d[47], d[48], d[49], d[50],
                                    d[51], d[52], d[53], d[54], d[55], d[56], d[57], d[58], d[59], d[60],
                                    d[61], d[62], d[63], d[64], d[65], d[66], d[67], d[68], d[69], d[70],
                                    d[71], d[72], d[73], d[74], d[75], d[76], d[77], d[78], d[79], d[80],
                                    d[81], d[82], d[83], d[84], d[85], d[86], d[87], d[88], d[89], d[90],
                                    d[91], d[92], d[93], d[94], d[95], d[96], d[97], d[98], d[99], d[100],
                                    d[101], d[102], d[103], d[104], d[105], d[106], d[107], d[108], d[109], d[110],
                                    d[111], d[112], d[113], d[114], d[115], d[116], d[117], d[118], d[119], d[120],
                                    d[121], d[122], d[123], d[124], d[125], d[126], d[127], d[128], d[129], d[130],
                                    d[131], d[132], d[133], d[134], d[135], d[136], d[137], d[138], d[139], d[140],
                                    d[141], d[142], d[143], d[144], d[145], d[146], d[147], d[148], d[149], d[150],
                                    d[151], d[152], d[153], d[154], d[155], d[156], d[157], d[158], d[159], d[160],
                                    d[161], d[162], d[163], d[164], d[165], d[166], d[167], d[168], d[169], d[170],
                                    d[171], d[172], d[173], d[174], d[175], d[176], d[177], d[178], d[179], d[180],
                                    d[181], d[182], d[183], d[184], d[185], d[186], d[187], d[188], d[189], d[190],
                                    d[191], d[192], d[193], d[194], d[195], d[196], d[197], d[198], d[199], d[200],
                                    d[201], d[202], d[203], d[204], d[205], d[206], d[207], d[208], d[209], d[210],
                                    d[211], d[212], d[213], d[214], d[215], d[216], d[217], d[218], d[219], d[220],
                                    d[221], d[222], d[223], d[224], d[225], d[226], d[227], d[228]])
            counter += 1
        except:
            print('Exception ', path)
            pass

        if counter == counterbreak: break
    np.save('data/{}_pixel_train_multitask_data{}.npy'.format(IMG_SIZE, counter), training_data)
    shuffle(training_data)
    if counter == 0: np.save('data/{}_pixel_train_multitask_data.npy'.format(IMG_SIZE), training_data)
    return training_data

def create_multitask_val_data():
    with open(anno_dir + 'validation.json') as json_data: anno_val = json.load(json_data)
    validation_data = []
    counter, counterbreak = 0, 200
    for filename in tqdm(anno_val['annotations']):
        d = {1:[1,0],2:[1,0],3:[1,0],4:[1,0],5:[1,0],6:[1,0],7:[1,0],8:[1,0],9:[1,0],10:[1,0],
                11:[1,0],12:[1,0],13:[1,0],14:[1,0],15:[1,0],16:[1,0],17:[1,0],18:[1,0],19:[1,0],20:[1,0],
                21:[1,0],22:[1,0],23:[1,0],24:[1,0],25:[1,0],26:[1,0],27:[1,0],28:[1,0],29:[1,0],30:[1,0],
                31:[1,0],32:[1,0],33:[1,0],34:[1,0],35:[1,0],36:[1,0],37:[1,0],38:[1,0],39:[1,0],40:[1,0],
                41:[1,0],42:[1,0],43:[1,0],44:[1,0],45:[1,0],46:[1,0],47:[1,0],48:[1,0],49:[1,0],50:[1,0],
                51:[1,0],52:[1,0],53:[1,0],54:[1,0],55:[1,0],56:[1,0],57:[1,0],58:[1,0],59:[1,0],60:[1,0],
                61:[1,0],62:[1,0],63:[1,0],64:[1,0],65:[1,0],66:[1,0],67:[1,0],68:[1,0],69:[1,0],70:[1,0],
                71:[1,0],72:[1,0],73:[1,0],74:[1,0],75:[1,0],76:[1,0],77:[1,0],78:[1,0],79:[1,0],80:[1,0],
                81:[1,0],82:[1,0],83:[1,0],84:[1,0],85:[1,0],86:[1,0],87:[1,0],88:[1,0],89:[1,0],90:[1,0],
                91:[1,0],92:[1,0],93:[1,0],94:[1,0],95:[1,0],96:[1,0],97:[1,0],98:[1,0],99:[1,0],100:[1,0],
                101:[1,0],102:[1,0],103:[1,0],104:[1,0],105:[1,0],106:[1,0],107:[1,0],108:[1,0],109:[1,0],110:[1,0],
                111:[1,0],112:[1,0],113:[1,0],114:[1,0],115:[1,0],116:[1,0],117:[1,0],118:[1,0],119:[1,0],120:[1,0],
                121:[1,0],122:[1,0],123:[1,0],124:[1,0],125:[1,0],126:[1,0],127:[1,0],128:[1,0],129:[1,0],130:[1,0],
                131:[1,0],132:[1,0],133:[1,0],134:[1,0],135:[1,0],136:[1,0],137:[1,0],138:[1,0],139:[1,0],140:[1,0],
                141:[1,0],142:[1,0],143:[1,0],144:[1,0],145:[1,0],146:[1,0],147:[1,0],148:[1,0],149:[1,0],150:[1,0],
                151:[1,0],152:[1,0],153:[1,0],154:[1,0],155:[1,0],156:[1,0],157:[1,0],158:[1,0],159:[1,0],160:[1,0],
                161:[1,0],162:[1,0],163:[1,0],164:[1,0],165:[1,0],166:[1,0],167:[1,0],168:[1,0],169:[1,0],170:[1,0],
                171:[1,0],172:[1,0],173:[1,0],174:[1,0],175:[1,0],176:[1,0],177:[1,0],178:[1,0],179:[1,0],180:[1,0],
                181:[1,0],182:[1,0],183:[1,0],184:[1,0],185:[1,0],186:[1,0],187:[1,0],188:[1,0],189:[1,0],190:[1,0],
                191:[1,0],192:[1,0],193:[1,0],194:[1,0],195:[1,0],196:[1,0],197:[1,0],198:[1,0],199:[1,0],200:[1,0],
                201:[1,0],202:[1,0],203:[1,0],204:[1,0],205:[1,0],206:[1,0],207:[1,0],208:[1,0],209:[1,0],210:[1,0],
                211:[1,0],212:[1,0],213:[1,0],214:[1,0],215:[1,0],216:[1,0],217:[1,0],218:[1,0],219:[1,0],220:[1,0],
                221:[1,0],222:[1,0],223:[1,0],224:[1,0],225:[1,0],226:[1,0],227:[1,0],228:[1,0]}

        for i in range(len(filename['labelId'])): d[int(filename['labelId'][i])] = [0, 1]

        path = os.path.join(VAL_DIR, filename['imageId'] + '.jpg')
        try:
            img = cv2.resize(cv2.imread(path, cv2.IMREAD_GRAYSCALE), (IMG_SIZE, IMG_SIZE))
            validation_data.append([np.array(img), d[1], d[2], d[3], d[4], d[5], d[6], d[7], d[8], d[9], d[10],
                                    d[11], d[12], d[13], d[14], d[15], d[16], d[17], d[18], d[19], d[20],
                                    d[21], d[22], d[23], d[24], d[25], d[26], d[27], d[28], d[29], d[30],
                                    d[31], d[32], d[33], d[34], d[35], d[36], d[37], d[38], d[39], d[40],
                                    d[41], d[42], d[43], d[44], d[45], d[46], d[47], d[48], d[49], d[50],
                                    d[51], d[52], d[53], d[54], d[55], d[56], d[57], d[58], d[59], d[60],
                                    d[61], d[62], d[63], d[64], d[65], d[66], d[67], d[68], d[69], d[70],
                                    d[71], d[72], d[73], d[74], d[75], d[76], d[77], d[78], d[79], d[80],
                                    d[81], d[82], d[83], d[84], d[85], d[86], d[87], d[88], d[89], d[90],
                                    d[91], d[92], d[93], d[94], d[95], d[96], d[97], d[98], d[99], d[100],
                                    d[101], d[102], d[103], d[104], d[105], d[106], d[107], d[108], d[109], d[110],
                                    d[111], d[112], d[113], d[114], d[115], d[116], d[117], d[118], d[119], d[120],
                                    d[121], d[122], d[123], d[124], d[125], d[126], d[127], d[128], d[129], d[130],
                                    d[131], d[132], d[133], d[134], d[135], d[136], d[137], d[138], d[139], d[140],
                                    d[141], d[142], d[143], d[144], d[145], d[146], d[147], d[148], d[149], d[150],
                                    d[151], d[152], d[153], d[154], d[155], d[156], d[157], d[158], d[159], d[160],
                                    d[161], d[162], d[163], d[164], d[165], d[166], d[167], d[168], d[169], d[170],
                                    d[171], d[172], d[173], d[174], d[175], d[176], d[177], d[178], d[179], d[180],
                                    d[181], d[182], d[183], d[184], d[185], d[186], d[187], d[188], d[189], d[190],
                                    d[191], d[192], d[193], d[194], d[195], d[196], d[197], d[198], d[199], d[200],
                                    d[201], d[202], d[203], d[204], d[205], d[206], d[207], d[208], d[209], d[210],
                                    d[211], d[212], d[213], d[214], d[215], d[216], d[217], d[218], d[219], d[220],
                                    d[221], d[222], d[223], d[224], d[225], d[226], d[227], d[228]])
        except:
            print('Exception')
    #     counter += 1
    #     if counter == counterbreak: break
    # np.save('..data/{}_pixel_val_multitask_data{}.npy'.format(IMG_SIZE, counter), validation_data)
    shuffle(validation_data)
    if counter == 0: np.save('data/{}_pixel_val_multitask_data.npy'.format(IMG_SIZE), validation_data)
    return validation_data




# def create_mock_train_val_multitask_data():
#     with open(anno_dir + 'train_annotations.json') as json_data: anno_train = json.load(json_data)
#     training_data = []
#     val_data = []
#     counter, counterbreak = 0, 7500
#     for filename in tqdm(anno_train['annotations']):
#         if filename['category_id'] == 0: label = [1, 0]
#         elif filename['category_id'] == 1: label = [0, 1]
#         path = os.path.join(TRAIN_DIR, filename['image_id']+'.jpg')
#         img = cv2.resize(cv2.imread(path, cv2.IMREAD_GRAYSCALE), (IMG_SIZE, IMG_SIZE))
#         for filename2 in (anno_train['images']):
#             if filename2['id'] == filename['image_id']:
#                 if np.random.random() <= 0.1: val_data.append([np.array(img), np.array(label), filename2['location']])
#                 else: training_data.append([np.array(img), np.array(label), filename2['location']])
#                 break
#         # counter += 1
#         # if counter == counterbreak: break
#     counter = 0
#     with open(anno_dir + 'val_annotations.json') as json_data: anno_val = json.load(json_data)
#     for filename in tqdm(anno_val['annotations']):
#         if filename['category_id'] == 0: label = [1, 0]
#         elif filename['category_id'] == 1: label = [0, 1]
#         path = os.path.join(VAL_DIR, filename['image_id']+'.jpg')
#         img = cv2.resize(cv2.imread(path, cv2.IMREAD_GRAYSCALE), (IMG_SIZE, IMG_SIZE))
#         for filename2 in (anno_val['images']):
#             if filename2['id'] == filename['image_id']:
#                 if np.random.random() <= 0.1: val_data.append([np.array(img), np.array(label), filename2['location']])
#                 else: training_data.append([np.array(img), np.array(label), filename2['location']])
#                 break
#     #     counter += 1
#     #     if counter == counterbreak: break
#     # np.save('data/{}_pixel_mock_train_multitask_data{}.npy'.format(IMG_SIZE, counterbreak), training_data)
#     # np.save('data/{}_pixel_mock_val_multitask_data{}.npy'.format(IMG_SIZE, counterbreak), val_data)
#     if counter == 0:
#         np.save('data/{}_pixel_mock_train_multitask_data.npy'.format(IMG_SIZE), training_data)
#         np.save('data/{}_pixel_mock_val_multitask_data.npy'.format(IMG_SIZE), val_data)
#     return training_data

anno_dir = 'D:PythonData/iMaterialist/Annotations/'
TRAIN_DIR = 'D:PythonData/iMaterialist/Train/'
VAL_DIR = 'D:PythonData/iMaterialist/Val/'
IMG_SIZE = 50


create_multitask_train_data()
# create_multitask_val_data()

#create_mock_train_val_multitask_data()
